%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: /Users/jessica/Desktop/ResearchCodingStuff/bloodpressure_mv/Over50PercentSelectedSepsisBPDataRecords.xlsx
%    Worksheet: Over50PercentSelectedSepsisBPDa
%
% Auto-generated by MATLAB on 27-Feb-2020 12:00:26

%% Setup the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 4);

% Specify sheet and range
opts.Sheet = "Over50PercentSelectedSepsisBPDa";
opts.DataRange = "E1:H610";

% Specify column names and types
opts.VariableNames = ["segments", "VarName6", "VarName7", "VarName8"];
opts.VariableTypes = ["string", "string", "string", "string"];

% Specify variable properties
opts = setvaropts(opts, ["segments", "VarName6", "VarName7", "VarName8"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["segments", "VarName6", "VarName7", "VarName8"], "EmptyFieldRule", "auto");

% Import the data
SpreedSheet = readtable("/Users/jessica/Desktop/ResearchCodingStuff/bloodpressure_mv/Over50PercentSelectedSepsisBPDataRecords.xlsx", opts, "UseExcel", false);


%% Clear temporary variables
clear opts


%% Create List of File Names

list = SpreedSheet.segments;
% list_2 = SpreedSheet.VarName6;
% list_3 = SpreedSheet.VarName7;
% list_4 = SpreedSheet.VarName8;

% list = [list_1; list_2; list_3; list_4];
list = unique(list);
list(1) = [];
list(end) = [];

%%Taking out all of the Data Not Recorded 



%% find the names of the folder 

all_segments = [];
enc_rec = [];
path = '/Users/jessica/Desktop/ResearchCodingStuff/bloodpressure_mv/Data/';
i = 1
x = []
y = []
% while  i <= length(list)
%     while x ~=1
         %filename = list(i);
         filename = 'A003-0391935204_0007'
         %foldername = filename{i}(1:end-5);
         foldername = filename(1:end-5);
         addpath([path foldername])
         textname = strcat(filename, '.hea')
         fid = fopen(textname,'r')
         tline = fgetl(fid)
         while ischar(tline)
           disp(tline)
           if (contains(tline,'AR1'))
                 x = [x 1]    
            else
                i= i+1 %%indexes out of bounds 
                x= [x 0]
           end 
           tline = fgetl(fid);
         end
         %A = regexp(fileread(textname),'/n','split');
         fclose(fid)
         whichline = find(x)
            
    %end
    

%     folderext = strcat(path,foldername,'.hea')
%     fh = fopen(folderext, 'r') 
%     while fh > 0 
%         x = fgetl(fh)
%         if contains(x,'~')
%             [word,rest]= strtok(x,'~')
%             numsamples = str2num(word)
%             %how to put zeros in for that many sample numbers? 
%             arrsample = [arrsample;numsamples]
%             all_segments = [all_segments;arrsample]
%         else 
            folderpath = strcat(path,foldername,'/',filename);
            this_segment = load(folderpath);
            % call ismail function here
            
            
            % read signal and ann
            %recordName = 'A003-0391935204_0007';%A003-0389652528_0016';
            
            recordName = folderpath
            [tm,signal,Fs,siginfo]=rdmat(recordName);

abpsig = signal(:,whichline); clear signal % signal 7 is bp (AR1)

% read ann
try
    [ann,type,subtype,chan,num,comments]=rdann([recordName],'wabp');
catch
    % if rdann does not work, use rdann from cmd line  
    disp('unable to use rdann')
    % rdann from cmd line and save to txt file
    [status,cmdout] = system(['rdann -a wabp -r ' recordName ' -f 0 > test.txt']);
    % read txt file, save in ann var 
    if (~ispc)
        [status, cmdout]= system('wc -l test.txt');
        if(status~=1)
            scanCell = textscan(cmdout,'%u %s');
            lineCount = scanCell{1};
        else
            fprintf(1,'Failed to find line count of %s\n',filenameOfInterest.txt);
            lineCount = -1;
        end
    else
        fprintf(1,'Sorry, I don''t know what the equivalent is for a windows system\n');
        lineCount = -1;
    end
    
    % store annotations in ann
    ann = NaN(1,lineCount);
    
    fid = fopen('test.txt');
    tline = fgetl(fid); cnt = 1;
    while ischar(tline)
        % read aech line in txt file
        tok = strsplit(tline); ann(cnt) = str2double(tok{1,3}); cnt = cnt + 1;
        tline = fgetl(fid);
    end
    fclose(fid);
    delete test.txt % delete txt file after reading ann
end

ann = ann(ann > 0); % positive values only

% perform MV
[ ~, ~, energyinbandcollectionTWDon2on, energyinbandcollectionTWDon2onmedian ] = MorphologyVarEvaluationBP_e( abpsig, ann', [] );%why isn't the function call working
maxlen = max(length(energyinbandcollectionTWDon2on),length(energyinbandcollectionTWDon2onmedian));

% pad each series with NaN to length maxlen
energyinbandcollectionTWDon2on = [energyinbandcollectionTWDon2on NaN(1,(maxlen-length(energyinbandcollectionTWDon2on)))];
energyinbandcollectionTWDon2onmedian = [energyinbandcollectionTWDon2onmedian NaN(1,(maxlen-length(energyinbandcollectionTWDon2onmedian)))];
% store energy series in same var. I evaluate features from the energyinbandcollectionTWDon2on series.  
energyseries = [energyinbandcollectionTWDon2on; energyinbandcollectionTWDon2onmedian];

% evaluate hourly parameters
nofiveminsegments = length(energyinbandcollectionTWDon2on);
noofhours = ceil(nofiveminsegments/12);

% eval following parameters
hourlyvariance = NaN(1,noofhours); % variance of abp mv each hr
hourly25pctl = NaN(1,noofhours); % 25th percentile of abp mv in each hour
hourly50pctl = NaN(1,noofhours); % 50th percentile of abp mv in each hour
hourly75pctl = NaN(1,noofhours); % 75th percentile of abp mv in each hour
hourlymax = NaN(1,noofhours); % max of abp mv in each hour
hourlymin = NaN(1,noofhours); % min of abp mv in each hour

for houridx = 1:noofhours
    
    for sigidx = 1
        % get hourly data segment
        startidx = 1 + (houridx-1)*12;
        endidx = houridx*12;
        if (endidx > size(energyseries,2))
            endidx = size(energyseries,2);
        end
        hourlyenergydata = energyseries(sigidx,startidx:endidx);
        
        % eval hourly features
        hourlyvariance(sigidx,houridx) = nanvar(hourlyenergydata);
        hourly25pctl(sigidx,houridx) = prctile(hourlyenergydata,25);
        hourly50pctl(sigidx,houridx) = prctile(hourlyenergydata,50);
        hourly75pctl(sigidx,houridx) = prctile(hourlyenergydata,75);
        hourlymax(sigidx,houridx) = max(hourlyenergydata);
        hourlymin(sigidx,houridx) = min(hourlyenergydata);
    
    end
    
end

% store the parameters in variationinfo
variationinfo = [hourlyvariance; hourly25pctl; hourly50pctl; hourly75pctl; hourlymax; hourlymin];
%save([recordName '_EnergySeriesHourlyParameterEstimates'], 'variationinfo');

            
            % save output of the function to csv
            output = strcat('mvmfeatures_', recordName, '.csv')
            csvwrite(output,variationinfo)

            all_segments = [all_segments; this_segment];
            
            
%         end
%     end 
         enc_rec = [enc_rec; i*ones(size(all_segments,1), 1)];
         i = i+1
 





